---
import { ui } from "../i18n/ui.js";

const locale = Astro.locals.lang ?? 'en';
const { pathname } = Astro.url;
const user = Astro.locals.user;
---

<nav class="navbar bg-base-100 shadow-md px-4 py-3">
  <div class="flex-1">
    <a href="/" class="flex items-center gap-3 hover:opacity-80 transition-opacity">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
      </svg>
      <span class="text-xl font-bold">SVG Studio</span>
    </a>
  </div>
  
  <!-- Navigation principale -->
  <div class="flex-none">
    <ul class="menu menu-horizontal px-1 gap-1">
      <li>
        <a 
          href="/generator"
          class={pathname.includes('/generator') ? 'active font-semibold' : 'font-medium'}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
          </svg>
          {ui[locale].nav.generator}
        </a>
      </li>
      <li>
        <a 
          href="/gallery"
          class={pathname.includes('/gallery') ? 'active font-semibold' : 'font-medium'}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          {ui[locale].nav.gallery}
        </a>
      </li>
    </ul>
  </div>

  <!-- Contrôles à droite -->
  <div class="flex-none gap-2 ml-4">
    <!-- Sélecteur de thème -->
    <div class="dropdown dropdown-end">
      <label tabindex="0" class="btn btn-ghost btn-sm btn-circle">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
        </svg>
      </label>
      <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow-lg bg-base-100 rounded-box w-52 border border-base-300">
        <li><a id="theme-light" data-theme="light">{ui[locale].themes.light}</a></li>
        <li><a id="theme-dark" data-theme="dark">{ui[locale].themes.dark}</a></li>
        <li><a id="theme-cyberpunk" data-theme="cyberpunk">{ui[locale].themes.cyberpunk}</a></li>
        <li><a id="theme-dracula" data-theme="dracula">{ui[locale].themes.dracula}</a></li>
      </ul>
    </div>

    <!-- Sélecteur de langue -->
    <div class="dropdown dropdown-end">
      <label tabindex="0" class="btn btn-ghost btn-sm btn-circle">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
        </svg>
      </label>
      <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow-lg bg-base-100 rounded-box w-32 border border-base-300">
        <li>
          <button class="lang-switch" data-lang="en">English</button>
        </li>
        <li>
          <button class="lang-switch" data-lang="fr">Français</button>
        </li>
      </ul>
    </div>

  {user ? (
    <form method="POST" action="/api/logout" class="m-0 p-0 ml-4">
      <button type="submit" class="btn btn-primary btn-sm gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
        </svg>
        {ui[locale].nav.logout}
      </button>
    </form>
  ) : (
    <a href="/login" class="btn btn-primary btn-sm ml-4 gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
      </svg>
      {ui[locale].nav.login}
    </a>
  )}
</div>

<script>
  // Gestion du changement de thème - cibler uniquement les boutons dans le dropdown
  const themeButtons = document.querySelectorAll('#theme-light, #theme-dark, #theme-cyberpunk, #theme-dracula');
  
  // Fonction pour changer le thème
  async function changeTheme(newTheme: string) {
    // Appliquer le thème immédiatement
    document.documentElement.setAttribute('data-theme', newTheme);
    
    // Sauvegarder dans localStorage
    localStorage.setItem('theme', newTheme);
    
    // Sauvegarder dans un cookie pour le serveur
    try {
      await fetch('/api/setTheme', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ theme: newTheme }),
      });
    } catch (error) {
      console.error('Erreur lors de la sauvegarde du thème:', error);
    }
  }

  // Écouter les clics sur les boutons de thème
  themeButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      const theme = (e.currentTarget as HTMLElement).getAttribute('data-theme');
      if (theme) {
        changeTheme(theme);
      }
    });
  });

  // Gestion du changement de langue
  const langButtons = document.querySelectorAll('.lang-switch');
  
  langButtons.forEach(button => {
    button.addEventListener('click', async (e) => {
      e.preventDefault();
      const newLang = (e.currentTarget as HTMLElement).getAttribute('data-lang');
      if (newLang) {
        // Sauvegarder dans un cookie nommé 'locale' (comme attendu par le middleware)
        document.cookie = `locale=${newLang}; path=/; max-age=31536000`;
        
        // Recharger la page pour appliquer la nouvelle langue
        window.location.reload();
      }
    });
  });
</script>
