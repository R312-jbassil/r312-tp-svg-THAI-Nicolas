---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";

const locale = Astro.locals.lang ?? 'en';
const user = Astro.locals.user;
---

<Layout>
  <div class="min-h-[calc(100vh-4rem)] bg-base-200 p-2 sm:p-4 md:p-6">
    <div class="max-w-7xl mx-auto">
      <div class="flex flex-col lg:flex-row gap-4 md:gap-6 min-h-[calc(100vh-8rem)]">

        <!-- SVG Preview -->
        <div class="flex-1 flex flex-col bg-base-100 rounded-xl shadow-lg overflow-hidden min-h-[300px] lg:min-h-0">
          <div class="bg-base-200 px-3 sm:px-4 py-2 sm:py-3 border-b border-base-300">
            <h2 class="font-semibold flex items-center gap-2 text-sm sm:text-base">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
              </svg>
              Preview
            </h2>
          </div>
          <div class="flex-1 flex items-center justify-center p-4 sm:p-6 md:p-8 bg-base-100">
            <div id="svg-container" class="flex items-center justify-center max-w-full max-h-full">
              <svg width="120" height="120" viewBox="0 0 100 100">
                <circle cx="50" cy="50" r="40" fill="currentColor" class="text-primary" />
              </svg>
            </div>
          </div>
        </div>
    
        <!-- Code Editor -->
        <div class="flex-1 flex flex-col bg-base-100 rounded-xl shadow-lg overflow-hidden min-h-[300px] lg:min-h-0">
          <div class="bg-neutral text-neutral-content px-4 py-2 flex items-center gap-2">
            <span class="w-3 h-3 rounded-full bg-error"></span>
            <span class="w-3 h-3 rounded-full bg-warning"></span>
            <span class="w-3 h-3 rounded-full bg-success"></span>
            <span class="ml-2 text-sm font-mono">code.svg</span>
          </div>
          <textarea id="svg-output" class="flex-1 bg-neutral text-neutral-content text-sm p-4 font-mono overflow-auto resize-none border-none outline-none" placeholder="SVG code will appear here...">&lt;svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="467.399px" height="467.399px" viewBox="0 0 467.399 467.399" style="enable-background:new 0 0 467.399 467.399;"
	 xml:space="preserve"&gt;
&lt;g&gt;
	&lt;path d="M0,357.796l2.016-10.392l3.183-0.165c10.507-0.567,17.026-1.88,19.544-3.942c2.506-2.069,9.132-11.484,19.863-28.26
		l129.649-209.619h12.25l39.717,206.604c2.905,15.202,5.84,24.767,8.798,28.667c2.971,3.913,8.811,6.101,17.528,6.55l4.186,0.165
		l-2.176,10.392h-93.077l2.187-10.392h5.187c16.219,0,24.32-2.684,24.32-8.051c0-5.703-0.946-13.707-2.846-23.997l-6.417-34.034
		H80.522l-20.995,33.372c-8.609,13.536-12.912,22.26-12.912,26.161c0,4.362,6.883,6.549,20.628,6.549h4.188l-2.172,10.392H0z
		 M87.192,266.735h93.647l-21.616-116.717L87.192,266.735z M398.273,357.796l15.309-76.793
		c-13.896,24.53-29.389,44.153-46.477,58.883c-17.064,14.735-32.97,22.095-47.712,22.095c-11.945,0-20.9-3.522-26.864-10.568
		c-5.976-7.046-8.954-17.566-8.954-31.558c0-36.363,12.772-70.185,38.337-101.467c25.558-31.274,53.19-46.914,82.875-46.914
		c3.126,0,7.14,0.357,12.052,1.055c4.918,0.695,10.77,1.75,17.591,3.142h32.97l-27.302,138.67
		c-1.897,9.174-2.854,17.165-2.854,23.998c0,3.569,1.069,5.757,3.191,6.537c2.116,0.792,9.103,1.572,20.96,2.353l3.014,0.165
		l-2.009,10.403H398.273L398.273,357.796z M418.564,256.018l11.609-58.194c-6.461-3.417-13.087-5.946-19.872-7.592
		c-6.798-1.646-13.808-2.474-21.043-2.474c-16.709,0-30.228,7.548-40.571,22.641c-8.239,12.07-15.309,28.17-21.22,48.296
		c-5.904,20.121-8.842,38.231-8.842,54.338c0,8.051,1.336,14.086,4.013,18.111c2.666,4.024,6.686,6.034,12.047,6.034
		C356.005,337.167,383.963,310.12,418.564,256.018z"/&gt;
&lt;/g&gt;
&lt;/svg&gt;</textarea>
        </div>
      </div>

      </div>
    
      <!-- Input Form -->
      <div class="mt-4 md:mt-6 bg-base-100 rounded-xl shadow-lg p-3 sm:p-4">
        <form class="flex flex-col gap-3">
          <input 
            id="user-prompt" 
            type="text" 
            class="input input-bordered w-full text-sm sm:text-base" 
            placeholder={ui[locale].generator.promptPlaceholder}
          />
          <div class="flex flex-col sm:flex-row gap-2">
            <button id="generate-button" type="button" class="btn btn-primary gap-2 flex-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              <span class="hidden xs:inline">{ui[locale].generator.generateButton}</span>
            </button>
            <button id="edit-button" type="button" class="btn btn-secondary gap-2 flex-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
              <span class="hidden xs:inline">{ui[locale].generator.editButton}</span>
            </button>
            <button id="save-button" type="button" class="btn btn-accent gap-2 flex-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
              </svg>
              <span class="hidden xs:inline">{ui[locale].generator.saveButton}</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Historique des √©changes de conversation
  let promptList: Array<{role: string, content: string}> = [];

  function updateSVGViewer() {
    const svgOutput = document.getElementById('svg-output') as HTMLTextAreaElement;
    const svgContainer = document.getElementById('svg-container');
    
    if (svgOutput && svgContainer) {
      try {
        svgContainer.innerHTML = svgOutput.value;
      } catch (error) {
        console.error('Erreur lors de la mise √† jour du SVG:', error);
      }
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    const svgOutput = document.getElementById('svg-output') as HTMLTextAreaElement;
    if (svgOutput) {
      svgOutput.addEventListener('input', updateSVGViewer);
      updateSVGViewer();
    }
  });

	
	async function generateSVG(promptList: Array<{role: string, content: string}>) {
		console.log('Generating SVG for promptList:', promptList);
		
		const res = await fetch('/api/generateSVG', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(promptList), // Envoyer la liste des prompts
		});
		const data = await res.json();
		
		// Retourner l'objet message complet de l'assistant
		return data.svg || { content: '' };
	}

	// Fonction utilitaire pour sauvegarder le SVG avec ta structure existante
	async function saveSVG() {
		const svgOutput = document.getElementById('svg-output') as HTMLTextAreaElement;
		
		if (!svgOutput || !svgOutput.value.trim()) {
			alert('Aucun SVG √† sauvegarder !');
			return;
		}

		// R√©cup√©rer les informations de l'utilisateur depuis le localStorage
		const userString = localStorage.getItem("user");
		if (!userString) {
			alert('Vous devez √™tre connect√© pour sauvegarder un SVG !');
			return;
		}
		
		const user = JSON.parse(userString);
		if (!user || !user.id) {
			alert('Informations utilisateur invalides. Veuillez vous reconnecter.');
			return;
		}

		const name = prompt('Donnez un nom √† votre cr√©ation :');
		if (!name || !name.trim()) {
			return;
		}

		try {
			// Limiter l'historique pour √©viter la limite de 5000 caract√®res
			const limitedPromptList = promptList.slice(-3); // Garder seulement les 3 derniers √©changes
			const promptText = JSON.stringify(limitedPromptList);
			
			// V√©rifier la taille et tronquer si n√©cessaire
			const maxPromptLength = 4500; // Marge de s√©curit√© sous les 5000 caract√®res
			const finalPrompt = promptText.length > maxPromptLength 
				? promptText.substring(0, maxPromptLength) + '...]' 
				: promptText;

			// Pr√©paration des donn√©es avec ta structure existante + l'ID utilisateur
			const params = {
				name: name.trim(), // Ton champ name
				code: svgOutput.value, // Ton champ code
				prompt: finalPrompt, // Historique limit√©
				user: user.id, // ID de l'utilisateur connect√©
			};

			console.log("üì§ Donn√©es √† sauvegarder:", params);
			console.log("üìè Taille du prompt:", params.prompt.length, "caract√®res");
			console.log("üë§ Utilisateur:", user.id);

			// Envoi √† l'endpoint API
			const res = await fetch("/api/saveSVG", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify(params),
			});
			
			const result = await res.json();
			console.log("üì• R√©ponse du serveur:", result);
			
			if (result.success) {
				alert("SVG sauvegard√© avec succ√®s !");
			} else {
				alert("Erreur lors de la sauvegarde : " + result.error);
				console.error("D√©tails de l'erreur:", result.details);
			}
		} catch (error) {
			console.error('Erreur lors de la sauvegarde:', error);
			alert('Erreur lors de la sauvegarde');
		}
	}

	async function handleSubmit(event: Event) {
        event.preventDefault();
        
        let prompt = "";
        let aiResponse: any = "";
        const promptElement = document.getElementById("user-prompt") as HTMLInputElement;
        prompt = promptElement ? promptElement.value : "";
        console.log("submitted: ", prompt);
        
        // R√©initialiser la liste des prompts
        promptList.length = 0; 
        promptList.push({ role: "user", content: prompt });
        
        const svgContainer = document.getElementById("svg-container");
        const generateButton = document.getElementById("generate-button") as HTMLButtonElement;
        const editButton = document.getElementById("edit-button") as HTMLButtonElement;
        
        // Afficher un spinner
        if (svgContainer) {
            svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
        }
        generateButton.disabled = true;
        if (editButton) editButton.disabled = true;
        
        let svgOutput = document.getElementById("svg-output") as HTMLTextAreaElement;
        
        try {
            // Appeler la fonction pour g√©n√©rer le SVG
            aiResponse = await generateSVG(promptList);
            console.log("R√©ponse AI compl√®te:", aiResponse);
            
            // Extraire le SVG de la r√©ponse - g√©rer plusieurs formats possibles
            let svgCode = "";
            let fullResponse = "";
            
            if (aiResponse.content) {
                fullResponse = aiResponse.content;
            } else if (typeof aiResponse === 'string') {
                fullResponse = aiResponse;
            } else if (aiResponse.message && aiResponse.message.content) {
                fullResponse = aiResponse.message.content;
            }
            
            console.log("Contenu √† analyser:", fullResponse);
            
            // Nettoyer le contenu des backticks markdown s'il y en a
            const cleanContent = fullResponse.replace(/```svg\n?/g, '').replace(/```\n?/g, '');
            
            // Extraire le SVG
            const svgMatch = cleanContent.match(/<svg[\s\S]*?<\/svg>/i);
            svgCode = svgMatch ? svgMatch[0] : "";
            
            console.log("SVG extrait:", svgCode);
            
            // Cr√©er l'objet de r√©ponse pour l'historique
            const responseObject = { role: "assistant", content: fullResponse };
            promptList.push(responseObject);
            
            // Afficher le SVG g√©n√©r√©
            if (svgOutput && svgCode) {
                svgOutput.value = svgCode;
            }
            if (svgContainer && svgCode) {
                svgContainer.innerHTML = svgCode;
            }
            
            if (!svgCode) {
                console.warn("Aucun SVG trouv√© dans la r√©ponse");
                if (svgContainer) {
                    svgContainer.innerHTML = '<div class="text-red-500 p-4">Erreur: Aucun SVG g√©n√©r√©</div>';
                }
            }
        } catch (error) {
            console.error('Erreur lors de la g√©n√©ration:', error);
            if (svgContainer) {
                svgContainer.innerHTML = '<div class="text-red-500 p-4">Erreur lors de la g√©n√©ration</div>';
            }
        } finally {
            // R√©activer les boutons
            generateButton.disabled = false;
            if (editButton) editButton.disabled = false;
        }
	}
    const generateButton = document.getElementById("generate-button");
    const saveButton = document.getElementById("save-button");
    const editButton = document.getElementById("edit-button");
    
	if (generateButton) {
		generateButton.addEventListener("click", handleSubmit);
	}
	
	if (saveButton) {
		saveButton.addEventListener("click", saveSVG);
	}
	
	// Ajouter l'√©v√©nement pour le bouton edit si n√©cessaire
	if (editButton) {
		// editButton.addEventListener("click", handleEdit);
	}

  async function handleEdit() {
    let prompt = "";
    let aiResponse: any = "";
    const promptElement = document.getElementById("user-prompt") as HTMLInputElement;
    prompt = promptElement ? promptElement.value : "";
    console.log("Prompt soumis : ", prompt);
    
    // Ajout du prompt de l'utilisateur √† la liste
    promptList.push({ role: "user", content: prompt });
    
    const svgContainer = document.getElementById("svg-container");
    const generateButton = document.getElementById("generate-button") as HTMLButtonElement;
    const editButton = document.getElementById("edit-button") as HTMLButtonElement;
    
    // Afficher un spinner de chargement
    if (svgContainer) {
        svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    }
    generateButton.disabled = true;
    editButton.disabled = true;
    
    let svgOutput = document.getElementById("svg-output") as HTMLTextAreaElement;
    
    try {
        // Appeler la fonction pour g√©n√©rer le SVG
        aiResponse = await generateSVG(promptList);
        console.log("R√©ponse AI compl√®te:", aiResponse);
        
        // Extraire le SVG de la r√©ponse - g√©rer plusieurs formats possibles
        let svgCode = "";
        let fullResponse = "";
        
        if (aiResponse.content) {
            fullResponse = aiResponse.content;
        } else if (typeof aiResponse === 'string') {
            fullResponse = aiResponse;
        } else if (aiResponse.message && aiResponse.message.content) {
            fullResponse = aiResponse.message.content;
        }
        
        console.log("Contenu √† analyser:", fullResponse);
        
        // Nettoyer le contenu des backticks markdown s'il y en a
        const cleanContent = fullResponse.replace(/```svg\n?/g, '').replace(/```\n?/g, '');
        
        // Extraire le SVG
        const svgMatch = cleanContent.match(/<svg[\s\S]*?<\/svg>/i);
        svgCode = svgMatch ? svgMatch[0] : "";
        
        console.log("SVG extrait:", svgCode);
        
        // Cr√©er l'objet de r√©ponse pour l'historique
        const responseObject = { role: "assistant", content: fullResponse };
        promptList.push(responseObject);
        
        // Afficher le SVG g√©n√©r√©
        if (svgOutput && svgCode) {
            svgOutput.value = svgCode;
        }
        if (svgContainer && svgCode) {
            svgContainer.innerHTML = svgCode;
        }
        
        if (!svgCode) {
            console.warn("Aucun SVG trouv√© dans la r√©ponse");
            if (svgContainer) {
                svgContainer.innerHTML = '<div class="text-red-500 p-4">Erreur: Aucun SVG g√©n√©r√©</div>';
            }
        }
        
        console.log("Historique des prompts : ", promptList);
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration:', error);
        if (svgContainer) {
            svgContainer.innerHTML = '<div class="text-red-500 p-4">Erreur lors de la g√©n√©ration</div>';
        }
    } finally {
        // R√©activer les boutons
        generateButton.disabled = false;
        editButton.disabled = false;
    }
}

if (editButton) {
    editButton.addEventListener("click", handleEdit);
}


</script>