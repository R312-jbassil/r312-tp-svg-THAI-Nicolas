---
import Layout from "../layouts/Layout.astro"
---

<Layout>
  <div class="min-h-screen flex flex-col bg-base-200 p-4">
    <div class="flex-1 flex flex-col md:flex-row gap-6">

      <div class="flex-1 flex flex-col bg-gradient-to-br from-white to-violet-100 rounded-2xl shadow-xl border-4 border-violet-400 p-6 min-h-[350px] max-h-[1000px] justify-center items-center">
        <div id="svg-container" class="flex items-center justify-center">
          <svg width="120" height="120" viewBox="0 0 100 100">
            <circle cx="50" cy="50" r="40" fill="#6366f1" filter="drop-shadow(0 2px 8px #a5b4fc)" />
          </svg>
        </div>
      </div>
    
      <div class="flex-1 flex flex-col bg-black rounded-2xl shadow-xl border-4 border-violet-400 p-0 overflow-hidden max-h-[1000px]">
        <div class="bg-gray-900 px-4 py-2 flex items-center gap-2 border-b border-gray-800">
          <span class="w-3 h-3 rounded-full bg-red-500"></span>
          <span class="w-3 h-3 rounded-full bg-yellow-400"></span>
          <span class="w-3 h-3 rounded-full bg-green-500"></span>
        </div>
        <textarea id="svg-output" class="flex-1 bg-black text-white text-xs md:text-sm p-4 font-mono overflow-x-auto resize-none border-none outline-none">&lt;svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="467.399px" height="467.399px" viewBox="0 0 467.399 467.399" style="enable-background:new 0 0 467.399 467.399;"
	 xml:space="preserve"&gt;
&lt;g&gt;
	&lt;path d="M0,357.796l2.016-10.392l3.183-0.165c10.507-0.567,17.026-1.88,19.544-3.942c2.506-2.069,9.132-11.484,19.863-28.26
		l129.649-209.619h12.25l39.717,206.604c2.905,15.202,5.84,24.767,8.798,28.667c2.971,3.913,8.811,6.101,17.528,6.55l4.186,0.165
		l-2.176,10.392h-93.077l2.187-10.392h5.187c16.219,0,24.32-2.684,24.32-8.051c0-5.703-0.946-13.707-2.846-23.997l-6.417-34.034
		H80.522l-20.995,33.372c-8.609,13.536-12.912,22.26-12.912,26.161c0,4.362,6.883,6.549,20.628,6.549h4.188l-2.172,10.392H0z
		 M87.192,266.735h93.647l-21.616-116.717L87.192,266.735z M398.273,357.796l15.309-76.793
		c-13.896,24.53-29.389,44.153-46.477,58.883c-17.064,14.735-32.97,22.095-47.712,22.095c-11.945,0-20.9-3.522-26.864-10.568
		c-5.976-7.046-8.954-17.566-8.954-31.558c0-36.363,12.772-70.185,38.337-101.467c25.558-31.274,53.19-46.914,82.875-46.914
		c3.126,0,7.14,0.357,12.052,1.055c4.918,0.695,10.77,1.75,17.591,3.142h32.97l-27.302,138.67
		c-1.897,9.174-2.854,17.165-2.854,23.998c0,3.569,1.069,5.757,3.191,6.537c2.116,0.792,9.103,1.572,20.96,2.353l3.014,0.165
		l-2.009,10.403H398.273L398.273,357.796z M418.564,256.018l11.609-58.194c-6.461-3.417-13.087-5.946-19.872-7.592
		c-6.798-1.646-13.808-2.474-21.043-2.474c-16.709,0-30.228,7.548-40.571,22.641c-8.239,12.07-15.309,28.17-21.22,48.296
		c-5.904,20.121-8.842,38.231-8.842,54.338c0,8.051,1.336,14.086,4.013,18.111c2.666,4.024,6.686,6.034,12.047,6.034
		C356.005,337.167,383.963,310.12,418.564,256.018z"/&gt;
&lt;/g&gt;
&lt;/svg&gt;</textarea>
      </div>
    </div>
    
    <form class="w-full flex gap-2 max-w-6xl mx-auto mb-20 mt-20">
      <input id="user-prompt" type="text" class="input input-bordered flex-1 text-base w-full h-16" placeholder="Tapez un prompt à générer en SVG" />
      <button id="generate-button" type="button" class="btn btn-primary h-16 w-40">Generate</button>
      <button id="save-button" type="button" class="btn btn-secondary h-16 w-32">Sauvegarder</button>
      <button class="btn btn-neutral mt-2 h-12 w-24" id="edit-button">Edit</button>
    </form>
  </div>
</Layout>

<script>
  // Historique des échanges de conversation
  let promptList: Array<{role: string, content: string}> = [];

  function updateSVGViewer() {
    const svgOutput = document.getElementById('svg-output') as HTMLTextAreaElement;
    const svgContainer = document.getElementById('svg-container');
    
    if (svgOutput && svgContainer) {
      try {
        svgContainer.innerHTML = svgOutput.value;
      } catch (error) {
        console.error('Erreur lors de la mise à jour du SVG:', error);
      }
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    const svgOutput = document.getElementById('svg-output') as HTMLTextAreaElement;
    if (svgOutput) {
      svgOutput.addEventListener('input', updateSVGViewer);
      updateSVGViewer();
    }
  });

	
	async function generateSVG(promptList: Array<{role: string, content: string}>) {
		console.log('Generating SVG for promptList:', promptList);
		
		const res = await fetch('/api/generateSVG', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(promptList), // Envoyer la liste des prompts
		});
		const data = await res.json();
		
		// Retourner l'objet message complet de l'assistant
		return data.svg || { content: '' };
	}

	async function saveSVG() {
		const svgOutput = document.getElementById('svg-output') as HTMLTextAreaElement;
		const promptElement = document.getElementById('user-prompt') as HTMLInputElement;
		
		if (!svgOutput || !svgOutput.value.trim()) {
			alert('Aucun SVG à sauvegarder !');
			return;
		}

		const name = prompt('Donnez un nom à votre SVG :');
		if (!name || !name.trim()) {
			return;
		}

		try {
			const { saveSVG } = await import('../../backend/pocketbase/pb.js');
			await saveSVG(name.trim(), svgOutput.value, promptElement?.value || '');
			alert('SVG sauvegardé avec succès !');
		} catch (error) {
			console.error('Erreur lors de la sauvegarde:', error);
			alert('Erreur lors de la sauvegarde');
		}
	}

	async function handleSubmit(event: Event) {
        event.preventDefault();
        
        let prompt = "";
        let aiResponse: any = "";
        const promptElement = document.getElementById("user-prompt") as HTMLInputElement;
        prompt = promptElement ? promptElement.value : "";
        console.log("submitted: ", prompt);
        
        // Réinitialiser la liste des prompts
        promptList.length = 0; 
        promptList.push({ role: "user", content: prompt });
        
        const svgContainer = document.getElementById("svg-container");
        const generateButton = document.getElementById("generate-button") as HTMLButtonElement;
        const editButton = document.getElementById("edit-button") as HTMLButtonElement;
        
        // Afficher un spinner
        if (svgContainer) {
            svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
        }
        generateButton.disabled = true;
        if (editButton) editButton.disabled = true;
        
        let svgOutput = document.getElementById("svg-output") as HTMLTextAreaElement;
        
        try {
            // Appeler la fonction pour générer le SVG
            aiResponse = await generateSVG(promptList);
            
            // Extraire le SVG de la réponse
            const svgMatch = aiResponse.content ? aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i) : null;
            aiResponse.content = svgMatch ? svgMatch[0] : "";
            console.log("svgCode: ", aiResponse.content);
            
            // Ajouter la réponse de l'IA à la liste des prompts
            promptList.push(aiResponse);
            
            // Afficher le SVG généré
            if (svgOutput) svgOutput.value = aiResponse.content;
            if (svgContainer) svgContainer.innerHTML = aiResponse.content;
        } catch (error) {
            console.error('Erreur lors de la génération:', error);
        } finally {
            // Réactiver les boutons
            generateButton.disabled = false;
            if (editButton) editButton.disabled = false;
        }
	}
    const generateButton = document.getElementById("generate-button");
    const saveButton = document.getElementById("save-button");
    const editButton = document.getElementById("edit-button");
    
	if (generateButton) {
		generateButton.addEventListener("click", handleSubmit);
	}
	
	if (saveButton) {
		saveButton.addEventListener("click", saveSVG);
	}
	
	// Ajouter l'événement pour le bouton edit si nécessaire
	if (editButton) {
		// editButton.addEventListener("click", handleEdit);
	}

  async function handleEdit() {
    let prompt = "";
    let aiResponse: any = "";
    const promptElement = document.getElementById("user-prompt") as HTMLInputElement;
    prompt = promptElement ? promptElement.value : "";
    console.log("Prompt soumis : ", prompt);
    
    // Ajout du prompt de l'utilisateur à la liste
    promptList.push({ role: "user", content: prompt });
    
    const svgContainer = document.getElementById("svg-container");
    const generateButton = document.getElementById("generate-button") as HTMLButtonElement;
    const editButton = document.getElementById("edit-button") as HTMLButtonElement;
    
    // Afficher un spinner de chargement
    if (svgContainer) {
        svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    }
    generateButton.disabled = true;
    editButton.disabled = true;
    
    let svgOutput = document.getElementById("svg-output") as HTMLTextAreaElement;
    
    try {
        // Appeler la fonction pour générer le SVG
        aiResponse = await generateSVG(promptList);
        
        // Extraire le SVG de la réponse
        const svgMatch = aiResponse.content ? aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i) : null;
        aiResponse.content = svgMatch ? svgMatch[0] : "";
        console.log("Code SVG généré : ", aiResponse.content);
        
        // Ajouter la réponse de l'IA à la liste des prompts
        promptList.push(aiResponse);
        
        // Afficher le SVG généré
        if (svgOutput) svgOutput.value = aiResponse.content;
        if (svgContainer) svgContainer.innerHTML = aiResponse.content;
        
        console.log("Historique des prompts : ", promptList);
    } catch (error) {
        console.error('Erreur lors de la génération:', error);
    } finally {
        // Réactiver les boutons
        generateButton.disabled = false;
        editButton.disabled = false;
    }
}

if (editButton) {
    editButton.addEventListener("click", handleEdit);
}


</script>