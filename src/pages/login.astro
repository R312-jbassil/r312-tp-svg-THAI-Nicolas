---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui";

// Si l'utilisateur est déjà connecté, on le redirige vers la page d'accueil
if (Astro.locals.user) {
  return Astro.redirect("/");
}

const lang = Astro.locals.lang || "en";
const tLogin = ui[lang].login;
const tSignup = ui[lang].signup;
const user = Astro.locals.user;
---

<Layout title={tLogin.title}>
  <div class="min-h-[calc(100vh-4rem)] flex items-center justify-center bg-gradient-to-br from-base-200 to-base-300 p-4">
    <div class="card w-full max-w-md shadow-2xl bg-base-100 hover:shadow-primary/20 transition-shadow duration-300 overflow-hidden relative">
      <!-- Tabs pour switcher entre Login et Signup -->
      <div class="tabs tabs-boxed w-full justify-center bg-base-200 p-2">
        <a class="tab tab-active" id="login-tab">{tLogin.title}</a>
        <a class="tab" id="signup-tab">{tSignup.title}</a>
      </div>

      <div class="card-body">
        <!-- Container avec slider -->
        <div class="overflow-hidden relative">
          <div class="flex transition-transform duration-500 ease-in-out" id="forms-container">
            
            <!-- FORMULAIRE DE CONNEXION -->
            <div class="w-full flex-shrink-0">
              <!-- Header avec icône -->
              <div class="text-center mb-6">
                <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-4">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                  </svg>
                </div>
                <h2 class="text-2xl font-bold text-base-content">{tLogin.subtitle}</h2>
              </div>

              <!-- Formulaire de connexion -->
              <form id="login-form" class="flex flex-col gap-4">
                <!-- Champ Email -->
                <div class="form-control">
                  <label class="label">
                    <span class="label-text font-semibold">{tLogin.email}</span>
                  </label>
                  <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                      </svg>
                    </div>
                    <input
                      type="email"
                      name="email"
                      placeholder={tLogin.emailPlaceholder}
                      required
                      class="input input-bordered w-full pl-10 focus:input-primary transition-all"
                      autocomplete="email"
                    />
                  </div>
                </div>

                <!-- Champ Mot de passe -->
                <div class="form-control">
                  <label class="label">
                    <span class="label-text font-semibold">{tLogin.password}</span>
                  </label>
                  <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                      </svg>
                    </div>
                    <input
                      type="password"
                      name="password"
                      placeholder={tLogin.passwordPlaceholder}
                      required
                      class="input input-bordered w-full pl-10 focus:input-primary transition-all"
                      autocomplete="current-password"
                    />
                  </div>
                </div>

                <!-- Bouton de connexion -->
                <button
                  type="submit"
                  id="login-submit-btn"
                  class="btn btn-primary w-full mt-2 gap-2"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                  </svg>
                  <span id="login-button-text">{tLogin.loginButton}</span>
                </button>
              </form>

              <!-- Zone d'affichage du statut Login -->
              <div id="login-status-container" class="mt-4 hidden">
                <div id="login-status" class="alert shadow-lg"></div>
              </div>
            </div>

            <!-- FORMULAIRE D'INSCRIPTION -->
            <div class="w-full flex-shrink-0">
              <!-- Header avec icône -->
              <div class="text-center mb-6">
                <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-secondary/10 mb-4">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-secondary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                  </svg>
                </div>
                <h2 class="text-2xl font-bold text-base-content">{tSignup.subtitle}</h2>
              </div>

              <!-- Formulaire d'inscription -->
              <form id="signup-form" class="flex flex-col gap-4">
                <!-- Champ Username -->
                <div class="form-control">
                  <label class="label">
                    <span class="label-text font-semibold">{tSignup.username}</span>
                  </label>
                  <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                    <input
                      type="text"
                      name="username"
                      placeholder={tSignup.usernamePlaceholder}
                      required
                      class="input input-bordered w-full pl-10 focus:input-secondary transition-all"
                      autocomplete="username"
                    />
                  </div>
                </div>

                <!-- Champ Email -->
                <div class="form-control">
                  <label class="label">
                    <span class="label-text font-semibold">{tSignup.email}</span>
                  </label>
                  <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                      </svg>
                    </div>
                    <input
                      type="email"
                      name="email"
                      placeholder={tSignup.emailPlaceholder}
                      required
                      class="input input-bordered w-full pl-10 focus:input-secondary transition-all"
                      autocomplete="email"
                    />
                  </div>
                </div>

                <!-- Champ Mot de passe -->
                <div class="form-control">
                  <label class="label">
                    <span class="label-text font-semibold">{tSignup.password}</span>
                  </label>
                  <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                      </svg>
                    </div>
                    <input
                      type="password"
                      name="password"
                      placeholder={tSignup.passwordPlaceholder}
                      required
                      minlength="8"
                      class="input input-bordered w-full pl-10 focus:input-secondary transition-all"
                      autocomplete="new-password"
                    />
                  </div>
                </div>

                <!-- Champ Confirmation Mot de passe -->
                <div class="form-control">
                  <label class="label">
                    <span class="label-text font-semibold">{tSignup.passwordConfirm}</span>
                  </label>
                  <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <input
                      type="password"
                      name="passwordConfirm"
                      placeholder={tSignup.passwordConfirmPlaceholder}
                      required
                      minlength="8"
                      class="input input-bordered w-full pl-10 focus:input-secondary transition-all"
                      autocomplete="new-password"
                    />
                  </div>
                </div>

                <!-- Bouton d'inscription -->
                <button
                  type="submit"
                  id="signup-submit-btn"
                  class="btn btn-secondary w-full mt-2 gap-2"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                  </svg>
                  <span id="signup-button-text">{tSignup.signupButton}</span>
                </button>
              </form>

              <!-- Zone d'affichage du statut Signup -->
              <div id="signup-status-container" class="mt-4 hidden">
                <div id="signup-status" class="alert shadow-lg"></div>
              </div>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ tLogin, tSignup }}>
  // On retire toute ancienne information utilisateur du stockage local
  localStorage.removeItem("user");

  // Éléments du slider
  const loginTab = document.getElementById("login-tab");
  const signupTab = document.getElementById("signup-tab");
  const formsContainer = document.getElementById("forms-container");

  // Vérifier si on arrive avec #signup dans l'URL
  if (window.location.hash === "#signup") {
    signupTab.classList.add("tab-active");
    loginTab.classList.remove("tab-active");
    formsContainer.style.transform = "translateX(-100%)";
  }

  // Gestion des tabs
  loginTab.addEventListener("click", () => {
    loginTab.classList.add("tab-active");
    signupTab.classList.remove("tab-active");
    formsContainer.style.transform = "translateX(0%)";
    window.location.hash = "";
  });

  signupTab.addEventListener("click", () => {
    signupTab.classList.add("tab-active");
    loginTab.classList.remove("tab-active");
    formsContainer.style.transform = "translateX(-100%)";
    window.location.hash = "signup";
  });

  // ==== FORMULAIRE LOGIN ====
  const loginForm = document.getElementById("login-form");
  const loginStatusContainer = document.getElementById("login-status-container");
  const loginStatus = document.getElementById("login-status");
  const loginSubmitBtn = document.getElementById("login-submit-btn");
  const loginButtonText = document.getElementById("login-button-text");

  function showLoginStatus(message, type) {
    loginStatus.textContent = message;
    loginStatus.className = `alert shadow-lg ${type === "success" ? "alert-success" : "alert-error"}`;
    loginStatusContainer.classList.remove("hidden");
  }

  function hideLoginStatus() {
    loginStatusContainer.classList.add("hidden");
  }

  loginForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    hideLoginStatus();

    loginSubmitBtn.disabled = true;
    loginSubmitBtn.classList.add("loading");
    loginButtonText.textContent = tLogin.loggingIn;

    try {
      const formData = new FormData(loginForm);
      const res = await fetch("/api/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: formData.get("email"),
          password: formData.get("password"),
        }),
        credentials: "include",
      });

      if (res.ok) {
        const resData = await res.json();
        localStorage.setItem("user", JSON.stringify(resData.user));
        
        showLoginStatus(tLogin.success, "success");
        loginButtonText.textContent = tLogin.redirecting;

        setTimeout(() => {
          window.location.href = "/";
        }, 1000);
      } else {
        showLoginStatus(tLogin.error, "error");
        loginSubmitBtn.disabled = false;
        loginSubmitBtn.classList.remove("loading");
        loginButtonText.textContent = tLogin.loginButton;
      }
    } catch (error) {
      showLoginStatus(tLogin.error, "error");
      loginSubmitBtn.disabled = false;
      loginSubmitBtn.classList.remove("loading");
      loginButtonText.textContent = tLogin.loginButton;
    }
  });

  // ==== FORMULAIRE SIGNUP ====
  const signupForm = document.getElementById("signup-form");
  const signupStatusContainer = document.getElementById("signup-status-container");
  const signupStatus = document.getElementById("signup-status");
  const signupSubmitBtn = document.getElementById("signup-submit-btn");
  const signupButtonText = document.getElementById("signup-button-text");

  function showSignupStatus(message, type) {
    signupStatus.textContent = message;
    signupStatus.className = `alert shadow-lg ${type === "success" ? "alert-success" : "alert-error"}`;
    signupStatusContainer.classList.remove("hidden");
  }

  function hideSignupStatus() {
    signupStatusContainer.classList.add("hidden");
  }

  signupForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    hideSignupStatus();

    const formData = new FormData(signupForm);
    const password = formData.get("password");
    const passwordConfirm = formData.get("passwordConfirm");

    // Vérifier que les mots de passe correspondent
    if (password !== passwordConfirm) {
      showSignupStatus(tSignup.passwordMismatch, "error");
      return;
    }

    signupSubmitBtn.disabled = true;
    signupSubmitBtn.classList.add("loading");
    signupButtonText.textContent = tSignup.signingUp;

    try {
      const res = await fetch("/api/signup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          username: formData.get("username"),
          email: formData.get("email"),
          password: password,
          passwordConfirm: passwordConfirm,
        }),
        credentials: "include",
      });

      const resData = await res.json();

      if (res.ok) {
        localStorage.setItem("user", JSON.stringify(resData.user));
        
        showSignupStatus(tSignup.success, "success");
        signupButtonText.textContent = tSignup.redirecting;

        setTimeout(() => {
          window.location.href = "/";
        }, 1000);
      } else {
        showSignupStatus(resData.error || tSignup.error, "error");
        signupSubmitBtn.disabled = false;
        signupSubmitBtn.classList.remove("loading");
        signupButtonText.textContent = tSignup.signupButton;
      }
    } catch (error) {
      showSignupStatus(tSignup.error, "error");
      signupSubmitBtn.disabled = false;
      signupSubmitBtn.classList.remove("loading");
      signupButtonText.textContent = tSignup.signupButton;
    }
  });
</script>
