---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui";

// Si l'utilisateur est déjà connecté, on le redirige vers la page d'accueil
if (Astro.locals.user) {
  return Astro.redirect("/");
}

const lang = Astro.locals.lang || "en";
const t = ui[lang].login;
---

<Layout title={t.title}>
  <div class="min-h-[calc(100vh-4rem)] flex items-center justify-center bg-gradient-to-br from-base-200 to-base-300 p-4">
    <div class="card w-full max-w-md shadow-2xl bg-base-100 hover:shadow-primary/20 transition-shadow duration-300">
      <div class="card-body">
        <!-- Header avec icône -->
        <div class="text-center mb-6">
          <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
          </div>
          <h1 class="text-3xl font-bold text-base-content">{t.title}</h1>
          <p class="text-base-content/60 mt-2">{t.subtitle}</p>
        </div>

        <!-- Formulaire de connexion -->
        <form id="login-form" class="flex flex-col gap-4">
          <!-- Champ Email -->
          <div class="form-control">
            <label class="label">
              <span class="label-text font-semibold">{t.email}</span>
            </label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                </svg>
              </div>
              <input
                type="email"
                name="email"
                placeholder={t.emailPlaceholder}
                required
                class="input input-bordered w-full pl-10 focus:input-primary transition-all"
                autocomplete="email"
              />
            </div>
          </div>

          <!-- Champ Mot de passe -->
          <div class="form-control">
            <label class="label">
              <span class="label-text font-semibold">{t.password}</span>
            </label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                </svg>
              </div>
              <input
                type="password"
                name="password"
                placeholder={t.passwordPlaceholder}
                required
                class="input input-bordered w-full pl-10 focus:input-primary transition-all"
                autocomplete="current-password"
              />
            </div>
          </div>

          <!-- Bouton de connexion -->
          <button
            type="submit"
            id="submit-btn"
            class="btn btn-primary w-full mt-2 gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
            </svg>
            <span id="button-text">{t.loginButton}</span>
          </button>
        </form>

        <!-- Zone d'affichage du statut -->
        <div id="status-container" class="mt-4 hidden">
          <div id="status" class="alert shadow-lg"></div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ t }}>
  // On retire toute ancienne information utilisateur du stockage local
  localStorage.removeItem("user");

  const form = document.getElementById("login-form");
  const statusContainer = document.getElementById("status-container");
  const status = document.getElementById("status");
  const submitBtn = document.getElementById("submit-btn");
  const buttonText = document.getElementById("button-text");

  // Fonction pour afficher le statut
  function showStatus(message, type) {
    status.textContent = message;
    status.className = `alert shadow-lg ${type === "success" ? "alert-success" : "alert-error"}`;
    statusContainer.classList.remove("hidden");
  }

  // Fonction pour cacher le statut
  function hideStatus() {
    statusContainer.classList.add("hidden");
  }

  // Gestion de la soumission du formulaire
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    hideStatus();

    // Désactiver le bouton et afficher un loader
    submitBtn.disabled = true;
    submitBtn.classList.add("loading");
    buttonText.textContent = t.loggingIn;

    try {
      const formData = new FormData(form);

      // Envoi des informations au serveur via l'API /api/login
      const res = await fetch("/api/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: formData.get("email"),
          password: formData.get("password"),
        }),
        credentials: "include", // Permet d'inclure les cookies dans la requête
      });

      // Traitement de la réponse
      if (res.ok) {
        const resData = await res.json();
        localStorage.setItem("user", JSON.stringify(resData.user)); // Sauvegarde des infos utilisateur
        
        showStatus(t.success, "success");
        buttonText.textContent = t.redirecting;

        // Redirection vers la page d'accueil après un court délai
        setTimeout(() => {
          window.location.href = "/";
        }, 1000);
      } else {
        showStatus(t.error, "error");
        submitBtn.disabled = false;
        submitBtn.classList.remove("loading");
        buttonText.textContent = t.loginButton;
      }
    } catch (error) {
      showStatus(t.error, "error");
      submitBtn.disabled = false;
      submitBtn.classList.remove("loading");
      buttonText.textContent = t.loginButton;
    }
  });
</script>
